// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_OPTIONS, VALID_ARGS, concatArg, nth, path, pick, reduce, ref, runAlpr, spawn, toPairs,
    slice = [].slice;

  ref = require('ramda'), reduce = ref.reduce, toPairs = ref.toPairs, pick = ref.pick;

  spawn = require('child_process').spawn;

  path = require('path');

  nth = (function(_this) {
    return function(i, list) {
      return list[i];
    };
  })(this);

  VALID_ARGS = ['country', 'topn', 'seek', 'pattern', 'motion', 'clock', 'detect_region', 'json'];

  DEFAULT_OPTIONS = {
    json: true
  };

  concatArg = (function(_this) {
    return function(args, arg) {
      var key, value;
      key = arg[0], value = arg[1];
      if (typeof value === 'boolean') {
        if (value) {
          return slice.call(args).concat(["--" + key]);
        } else {
          return args;
        }
      } else {
        return slice.call(args).concat(["--" + key], [value]);
      }
    };
  })(this);

  runAlpr = (function(_this) {
    return function(file, options) {
      var args;
      args = reduce(concatArg, [], toPairs(options));
      console.log('ARGS', args);
      return spawn('alpr', slice.call(args).concat([file]));
    };
  })(this);

  module.exports = (function(_this) {
    return function(file, _options) {
      var data, err, options, proc, result;
      options = pick(VALID_ARGS, Object.assign({}, DEFAULT_OPTIONS, _options));
      proc = runAlpr(file, options);
      data = '';
      err = '';
      result = new Promise(function(resolve, reject) {
        proc.stdout.on('data', function(d) {
          return data += d;
        });
        proc.stderr.on('data', function(d) {
          return err += d;
        });
        return proc.on('close', function(code) {
          if (code === 0) {
            return resolve(data);
          } else {
            return reject(err);
          }
        });
      });
      return result.then(function(d) {
        if (options.json) {
          return JSON.parse(d);
        } else {
          return d;
        }
      });
    };
  })(this);

}).call(this);
